{"version":3,"sources":["components/UI/Card.module.css","components/quotes/QuoteForm.module.css","components/UI/Card.js","components/quotes/QuoteForm.js","pages/NewQuote.js"],"names":["module","exports","Card","props","className","classes","card","children","QuoteForm","useState","formIsEdited","setFormIsEdited","authorInputRef","useRef","textInputRef","when","message","location","onFocus","form","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","loading","LoadingSpinner","control","htmlFor","type","id","ref","rows","actions","onClick","NewQuote","history","useHistory","useHttp","addQuote","sendQuote","sendRequest","status","error","useEffect","push","content","quoteProps"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,qB,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,2BAA2B,QAAU,2BAA2B,QAAU,6B,yFCKtHC,EAJF,SAACC,GACZ,OAAO,qBAAKC,UAAWC,IAAQC,KAAxB,SAA+BH,EAAMI,Y,yBCkE/BC,EA/DG,SAACL,GACjB,MAAwCM,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAiBC,mBACjBC,EAAeD,mBAqBrB,OACE,eAAC,WAAD,WACE,cAAC,IAAD,CACEE,KAAML,EACNM,QAAS,SAACC,GAAD,MACP,8EAGJ,cAAC,EAAD,UACE,uBACEC,QAlBR,WACEP,GAAgB,IAkBVP,UAAWC,IAAQc,KACnBC,SA/BR,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBX,EAAeY,QAAQC,MACvCC,EAAcZ,EAAaU,QAAQC,MAIzCtB,EAAMwB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAoB5C,UAKGvB,EAAM2B,WACL,qBAAK1B,UAAWC,IAAQ0B,QAAxB,SACE,cAACC,EAAA,EAAD,MAIJ,sBAAK5B,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,SAAf,oBACA,uBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,OAEtC,sBAAKR,UAAWC,IAAQ4B,QAAxB,UACE,uBAAOC,QAAQ,OAAf,kBACA,0BAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,OAEpC,qBAAKV,UAAWC,IAAQkC,QAAxB,SACE,wBAAQC,QAjClB,WACE7B,GAAgB,IAgCkCP,UAAU,MAApD,kC,gBChCGqC,UAtBE,WACb,IAAMC,EAAUC,cAChB,EAA6CC,YAAQC,KAAlCC,EAAnB,EAAOC,YAAsBC,EAA7B,EAA6BA,OAAOC,EAApC,EAAoCA,MACpCC,qBAAU,WACS,cAAXF,GAA2BC,GAC3BP,EAAQS,KAAK,aAEnB,CAACH,EAAOC,EAAMP,IAChB,IAGIU,EAIJ,MAHe,cAAXJ,GAA0BC,IAC1BG,EAAU,4BAAIH,KAGd,eAAC,WAAD,WACKG,EACD,cAAC,EAAD,CAAWtB,UAAwB,YAAXkB,EAAuBrB,WAV/B,SAAC0B,GACrBP,EAAUO","file":"static/js/6.56e1b2db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3OglD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"QuoteForm_form__rfNqX\",\"loading\":\"QuoteForm_loading__2Ke9o\",\"control\":\"QuoteForm_control__1owgL\",\"actions\":\"QuoteForm_actions__vBok3\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","import { Fragment, useRef, useState } from \"react\";\nimport { Prompt } from \"react-router-dom\";\nimport Card from \"../UI/Card\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./QuoteForm.module.css\";\n\nconst QuoteForm = (props) => {\n  const [formIsEdited, setFormIsEdited] = useState(false);\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  function formIsFocusedHandler() {\n    setFormIsEdited(true);\n  }\n\n  function formIsNotFocusedHandler() {\n    setFormIsEdited(false);\n  }\n\n  return (\n    <Fragment>\n      <Prompt\n        when={formIsEdited}\n        message={(location) =>\n          \"Are you sure you want to leave this page. All your inputs would be lost!\"\n        }\n      />\n      <Card>\n        <form\n          onFocus={formIsFocusedHandler}\n          className={classes.form}\n          onSubmit={submitFormHandler}\n        >\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor=\"author\">Author</label>\n            <input type=\"text\" id=\"author\" ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor=\"text\">Text</label>\n            <textarea id=\"text\" rows=\"5\" ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={formIsNotFocusedHandler} className=\"btn\">\n              Add Quote\n            </button>\n          </div>\n        </form>\n      </Card>\n    </Fragment>\n  );\n};\n\nexport default QuoteForm;\n","import QuoteForm from \"../components/quotes/QuoteForm\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { addQuote } from \"../lib/api\";\r\nimport { Fragment, useEffect } from \"react\";\r\nconst NewQuote = ()=>{\r\n    const history = useHistory();\r\n    const {sendRequest:sendQuote,status,error} = useHttp(addQuote);\r\n    useEffect(()=>{\r\n        if (status === \"completed\" && !error){\r\n            history.push(\"/quotes\");\r\n        }\r\n    },[status,error,history])\r\n    const addQuoteHandler = (quoteProps)=>{\r\n        sendQuote(quoteProps);\r\n    };\r\n    let content;\r\n    if (status === \"completed\" && error){\r\n        content = <p>{error}</p>\r\n    }\r\n    return (\r\n        <Fragment>\r\n            {content}\r\n            <QuoteForm isLoading = {status === \"pending\"}  onAddQuote = {addQuoteHandler} />\r\n        </Fragment>\r\n    ) \r\n}\r\nexport default NewQuote;"],"sourceRoot":""}