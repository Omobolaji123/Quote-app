{"version":3,"sources":["components/quotes/QuoteItem.module.css","components/quotes/QuoteList.module.css","components/quotes/NoQuotesFound.module.css","components/quotes/QuoteItem.js","components/quotes/QuoteList.js","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"names":["module","exports","QuoteItem","props","match","useRouteMatch","className","classes","item","text","author","to","path","id","QuoteList","quotes","ascending","history","useHistory","location","useLocation","isAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","sorting","onClick","push","pathname","list","map","quote","NoQuotesFound","noquotes","AllQuote","useHttp","getAllQuotes","loadQuotes","sendRequest","data","status","error","useEffect","LoadingSpinner","length"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,KAAO,0B,mBCAzBD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,QAAU,6B,mBCA3DD,EAAOC,QAAU,CAAC,SAAW,kC,wFCgBdC,EAfG,SAACC,GACjB,IAAMC,EAAQC,cACd,OACE,qBAAIC,UAAWC,IAAQC,KAAvB,UACE,mCACE,qCACE,4BAAIL,EAAMM,SAEZ,qCAAaN,EAAMO,YAErB,cAAC,IAAD,CAAMJ,UAAU,MAAMK,GAAE,UAAKP,EAAMQ,KAAX,YAAmBT,EAAMU,IAAjD,2B,iBCoCSC,EAlCG,SAACX,GACjB,IAVkBY,EAAQC,EAUpBC,EAAUC,cACVC,EAAWC,cAEXC,EAA2C,QAD5B,IAAIC,gBAAgBH,EAASI,QACjBC,IAAI,QAC/BC,GAdYV,EAccZ,EAAMY,OAdZC,EAcmBK,EAbtCN,EAAOW,MAAK,SAACC,EAAQC,GAC1B,OAAIZ,EACKW,EAAOd,GAAKe,EAAOf,GAAK,GAAK,EAE7Bc,EAAOd,GAAKe,EAAOf,GAAK,GAAK,MAiBxC,OACE,eAAC,WAAD,WACE,qBAAKP,UAAWC,IAAQsB,QAAxB,SACE,yBAAQC,QAViB,WAC7Bb,EAAQc,KAAK,CACXC,SAAUb,EAASa,SACnBT,OAAO,SAAD,OAAUF,EAAc,OAAS,UAOrC,kBACQA,EAAc,aAAe,iBAGvC,oBAAIf,UAAWC,IAAQ0B,KAAvB,SACGR,EAAaS,KAAI,SAACC,GAAD,OAChB,cAAC,EAAD,CAEEtB,GAAIsB,EAAMtB,GACVH,OAAQyB,EAAMzB,OACdD,KAAM0B,EAAM1B,MAHP0B,EAAMtB,a,yBCvBRuB,EAXO,WACpB,OACE,sBAAK9B,UAAWC,IAAQ8B,SAAxB,UACE,iDACA,cAAC,IAAD,CAAM/B,UAAU,MAAMK,GAAG,aAAzB,6B,gBCkBS2B,UAlBE,WACb,MAAoDC,YAAQC,KAAa,GAArDC,EAApB,EAAOC,YAAwBC,EAA/B,EAA+BA,KAAKC,EAApC,EAAoCA,OAAOC,EAA3C,EAA2CA,MAI3C,OAHAC,qBAAU,WACNL,MACF,CAACA,IACU,YAATG,EACO,cAACG,EAAA,EAAD,IAEI,cAAXH,GAA0BC,EAClB,mBAAGvC,UAAU,WAAb,SAAyBuC,IAEtB,cAAXD,GAA2BD,EAAKK,OAGrB,cAAXJ,GAA2BC,OAA/B,EACY,cAAC,EAAD,CAAW9B,OAAQ4B,IAHnB,cAAC,EAAD","file":"static/js/5.cc54faf4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"QuoteItem_item__2ArvS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"QuoteList_list__gk5Ai\",\"sorting\":\"QuoteList_sorting__3POx4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__2njft\"};","import classes from './QuoteItem.module.css';\nimport { Link,useRouteMatch } from 'react-router-dom';\nconst QuoteItem = (props) => {\n  const match = useRouteMatch();\n  return (\n    <li className={classes.item}>\n      <figure>\n        <blockquote>\n          <p>{props.text}</p>\n        </blockquote>\n        <figcaption>{props.author}</figcaption>\n      </figure>\n      <Link className=\"btn\" to={`${match.path}/${props.id}`}>Show more</Link>\n    </li>\n  );\n};\n\nexport default QuoteItem;\n","import { Fragment } from \"react\";\nimport { useHistory, useLocation } from \"react-router-dom\";\nimport QuoteItem from \"./QuoteItem\";\nimport classes from \"./QuoteList.module.css\";\n\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.id > quoteB.id ? 1 : -1;\n    } else {\n      return quoteA.id < quoteB.id ? 1 : -1;\n    }\n  });\n}\nconst QuoteList = (props) => {\n  const history = useHistory();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  const isAscending = searchParams.get(\"sort\") === \"asc\";\n  const sortedQuotes = sortQuotes(props.quotes,isAscending);\n  const changeSortOrderHandler = () => {\n    history.push({\n      pathname: location.pathname,\n      search:`?sort=${isAscending ? \"desc\" : \"asc\"}`,\n    })\n    // history.push(`${location.pathname}?sort=${isAscending ? \"desc\" : \"asc\"}`);\n  };\n  return (\n    <Fragment>\n      <div className={classes.sorting}>\n        <button onClick={changeSortOrderHandler}>\n          Sort {isAscending ? \"Descending\" : \"Ascending\"}\n        </button>\n      </div>\n      <ul className={classes.list}>\n        {sortedQuotes.map((quote) => (\n          <QuoteItem\n            key={quote.id}\n            id={quote.id}\n            author={quote.author}\n            text={quote.text}\n          />\n        ))}\n      </ul>\n    </Fragment>\n  );\n};\n\nexport default QuoteList;\n","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to=\"/new-quote\"> \n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from \"react\";\r\nimport QuoteList from \"../components/quotes/QuoteList\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getAllQuotes } from \"../lib/api\";  \r\n\r\nconst AllQuote = ()=>{\r\n    const {sendRequest: loadQuotes,data,status,error} = useHttp(getAllQuotes,true);\r\n    useEffect(()=>{\r\n        loadQuotes();\r\n    },[loadQuotes]);\r\n    if (status===\"pending\"){\r\n        return <LoadingSpinner />\r\n    }\r\n    if (status === \"completed\" && error){\r\n        return  <p className=\"centered\">{error}</p>\r\n    }\r\n    if (status === \"completed\" && !data.length){\r\n        return  <NoQuotesFound />\r\n    }\r\n    if (status === \"completed\" && !error){\r\n        return  <QuoteList quotes={data}/>\r\n    }\r\n}\r\nexport default AllQuote;"],"sourceRoot":""}